{
	"info": {
		"_postman_id": "44523b01-6eab-4417-a4da-140790bc56a5",
		"name": "QAuto Homework",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30840446",
		"_collection_link": "https://lively-firefly-808442.postman.co/workspace/New-Team-Workspace~5dd16fe1-7755-4997-a488-9834a8992f07/collection/30840446-44523b01-6eab-4417-a4da-140790bc56a5?action=share&source=collection_link&creator=30840446"
	},
	"item": [
		{
			"name": "User signup",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var randomEmail = \"homework13\" + Math.floor(Math.random() * 100) + \"@gmail.com\"\r",
							"pm.collectionVariables.set(\"email\", randomEmail);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"Status is ok\", function () {\r",
							"    pm.expect(jsonData.status).to.eql(\"ok\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Sasha\",\r\n  \"lastName\": \"Kudinova\",\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"Qwerty12345\",\r\n  \"repeatPassword\": \"Qwerty12345\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{urlhw}}/auth/signup",
					"host": [
						"{{urlhw}}"
					],
					"path": [
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit distance units",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status is ok\", function () {\r",
							"    pm.expect(jsonData.status).to.eql(\"ok\");\r",
							"});\r",
							"\r",
							"pm.test(\"Distance units is ml\"), function () {\r",
							"    pm.expect(jsonData.data.distanceUnits).to.eql(\"ml\");\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"currency\": \"usd\",\r\n  \"distanceUnits\": \"ml\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{urlhw}}/users/settings",
					"host": [
						"{{urlhw}}"
					],
					"path": [
						"users",
						"settings"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get disntance units after edition",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status is ok\", function () {\r",
							"    pm.expect(jsonData.status).to.eql(\"ok\");\r",
							"});\r",
							"\r",
							"pm.test(\"Distance units is ml\"), function () {\r",
							"    pm.expect(jsonData.data.distanceUnits).to.eql(\"ml\");\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlhw}}/users/settings",
					"host": [
						"{{urlhw}}"
					],
					"path": [
						"users",
						"settings"
					]
				}
			},
			"response": []
		},
		{
			"name": "Change of name and last name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status is ok\", function () {\r",
							"    pm.expect(jsonData.status).to.eql(\"ok\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"photoFilename\": \"user-1621352948859.jpg\",\r\n  \"name\": \"Bridget\",\r\n  \"lastName\": \"Jones\",\r\n  \"dateBirth\": \"2021-03-17T15:21:05.000Z\",\r\n  \"country\": \"Ukraine\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{urlhw}}/users/profile",
					"host": [
						"{{urlhw}}"
					],
					"path": [
						"users",
						"profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get profile with updated name and last name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status is ok\", function () {\r",
							"    pm.expect(jsonData.status).to.eql(\"ok\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlhw}}/users/profile",
					"host": [
						"{{urlhw}}"
					],
					"path": [
						"users",
						"profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get cars brands",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json ()\r",
							"\r",
							"pm.collectionVariables.set(\"AudiId\",jsonData.data[0].id);\r",
							"pm.collectionVariables.set(\"BMWId\",jsonData.data[1].id);\r",
							"pm.collectionVariables.set(\"FordId\",jsonData.data[2].id);\r",
							"pm.collectionVariables.set(\"PorsheId\",jsonData.data[3].id);\r",
							"pm.collectionVariables.set(\"FiatId\", jsonData.data[4].id);\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status is ok\", function () {\r",
							"    pm.expect(jsonData.status).to.eql(\"ok\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlhw}}/cars/brands",
					"host": [
						"{{urlhw}}"
					],
					"path": [
						"cars",
						"brands"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get cars models",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json ()\r",
							"\r",
							"pm.collectionVariables.set(\"TT\",jsonData.data[0].id);\r",
							"pm.collectionVariables.set(\"R8\",jsonData.data[1].id);\r",
							"pm.collectionVariables.set(\"Q7\",jsonData.data[2].id);\r",
							"pm.collectionVariables.set(\"A6\",jsonData.data[3].id);\r",
							"pm.collectionVariables.set(\"A8\", jsonData.data[4].id);\r",
							"pm.collectionVariables.set(\"3\",jsonData.data[5].id);\r",
							"pm.collectionVariables.set(\"5\",jsonData.data[6].id);\r",
							"pm.collectionVariables.set(\"X5\",jsonData.data[7].id);\r",
							"pm.collectionVariables.set(\"X6\",jsonData.data[8].id);\r",
							"pm.collectionVariables.set(\"Z3\", jsonData.data[9].id);\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status is ok\", function () {\r",
							"    pm.expect(jsonData.status).to.eql(\"ok\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlhw}}/cars/models",
					"host": [
						"{{urlhw}}"
					],
					"path": [
						"cars",
						"models"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a car",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"pm.collectionVariables.set(\"carId\", jsonData.data.id);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Status is ok\", function () {\r",
							"    pm.expect(jsonData.status).to.eql(\"ok\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"carBrandId\": {{BMWId}},\r\n  \"carModelId\": {{X5}},\r\n  \"mileage\": 100\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{urlhw}}/cars",
					"host": [
						"{{urlhw}}"
					],
					"path": [
						"cars"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit mileage",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status is ok\", function () {\r",
							"    pm.expect(jsonData.status).to.eql(\"ok\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"carBrandId\": {{BMWId}},\r\n  \"carModelId\": {{X5}},\r\n  \"mileage\": 250\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{urlhw}}/cars/{{carId}}",
					"host": [
						"{{urlhw}}"
					],
					"path": [
						"cars",
						"{{carId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a car by Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status is ok\", function () {\r",
							"    pm.expect(jsonData.status).to.eql(\"ok\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlhw}}/cars/{{carId}}",
					"host": [
						"{{urlhw}}"
					],
					"path": [
						"cars",
						"{{carId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create an expense",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status is ok\", function () {\r",
							"    pm.expect(jsonData.status).to.eql(\"ok\");\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"expenseId\", jsonData.data.id);\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"pm.variables.set(\"currentDate\", new Date().toISOString().split('T')[0]);\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"carId\": {{carId}},\r\n  \"reportedAt\": \"{{currentDate}}\",\r\n  \"mileage\": 360,\r\n  \"liters\": 11,\r\n  \"totalCost\": 11,\r\n  \"forceMileage\": false\r\n}\r\n\r\n\r\n\r\n\r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{urlhw}}/expenses",
					"host": [
						"{{urlhw}}"
					],
					"path": [
						"expenses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get expense by Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status is ok\", function () {\r",
							"    pm.expect(jsonData.status).to.eql(\"ok\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlhw}}/expenses/{{expenseId}}",
					"host": [
						"{{urlhw}}"
					],
					"path": [
						"expenses",
						"{{expenseId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a car by Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status is ok\", function () {\r",
							"    pm.expect(jsonData.status).to.eql(\"ok\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{urlhw}}/cars/{{carId}}",
					"host": [
						"{{urlhw}}"
					],
					"path": [
						"cars",
						"{{carId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a car by Id after deletion",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Status is error\", function () {\r",
							"    pm.expect(jsonData.status).to.eql(\"error\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlhw}}/cars/{{carId}}",
					"host": [
						"{{urlhw}}"
					],
					"path": [
						"cars",
						"{{carId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status is ok\", function () {\r",
							"    pm.expect(jsonData.status).to.eql(\"ok\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{urlhw}}/users",
					"host": [
						"{{urlhw}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "urlhw",
			"value": "https://qauto.forstudy.space/api",
			"type": "string"
		},
		{
			"key": "carId",
			"value": "",
			"type": "string"
		},
		{
			"key": "expenseId",
			"value": "",
			"type": "string"
		},
		{
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"key": "AudiId",
			"value": ""
		},
		{
			"key": "BMWId",
			"value": ""
		},
		{
			"key": "FordId",
			"value": ""
		},
		{
			"key": "PorsheId",
			"value": ""
		},
		{
			"key": "FiatId",
			"value": ""
		},
		{
			"key": "3",
			"value": ""
		},
		{
			"key": "5",
			"value": ""
		},
		{
			"key": "TT",
			"value": ""
		},
		{
			"key": "R8",
			"value": ""
		},
		{
			"key": "Q7",
			"value": ""
		},
		{
			"key": "A6",
			"value": ""
		},
		{
			"key": "A8",
			"value": ""
		},
		{
			"key": "X5",
			"value": ""
		},
		{
			"key": "X6",
			"value": ""
		},
		{
			"key": "Z3",
			"value": ""
		},
		{
			"key": "currentDate",
			"value": "",
			"type": "string"
		}
	]
}